// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Type from "../node_modules/@rescript/core/src/Core__Type.bs.js";

var Never = {};

var Any = {};

var Unknown = {};

var Union = {};

var Intersection = {};

function $$return(x) {
  return ((function (x) {
    switch (x) {
      case 'null' | 'Null': return null;
      case 'undefined' | 'Undefined': return;
      default: return x.VAL;
    }
  })(x));
}

var $$null = null;

var $$undefined = undefined;

function classify(x) {
  var b = Core__Type.Classify.classify(x);
  if (typeof b !== "object") {
    if (b === "Null") {
      return "Null";
    } else {
      return "Undefined";
    }
  }
  switch (b.TAG) {
    case "Bool" :
        return {
                NAME: "Boolean",
                VAL: b._0
              };
    case "String" :
        return {
                NAME: "String",
                VAL: b._0
              };
    case "Number" :
        return {
                NAME: "Number",
                VAL: b._0
              };
    case "Object" :
    case "Function" :
        return {
                NAME: "Other",
                VAL: x
              };
    case "Symbol" :
        return {
                NAME: "Symbol",
                VAL: b._0
              };
    case "BigInt" :
        return {
                NAME: "BigInt",
                VAL: b._0
              };
    
  }
}

var Primitive = {
  $$return: $$return,
  $$null: $$null,
  $$undefined: $$undefined,
  classify: classify
};

function apply0(f0) {
  return (new f0());
}

function apply1(f1, arg1) {
  return (new f1(arg1));
}

function applyN(fn, args) {
  return (new fn(...args));
}

var Newable = {
  apply0: apply0,
  apply1: apply1,
  applyN: applyN
};

function make0(f) {
  return ((function(...args) { return f(args); }));
}

function make1(f) {
  return ((function(arg1, ...args) { return f(arg1, args); }));
}

function make2(f) {
  return ((function(arg1, arg2, ...args) { return f(arg1, arg2, args); }));
}

function make3(f) {
  return ((function(arg1, arg2, arg3, ...args) { return f(arg1, arg2, arg3, args); }));
}

function make4(f) {
  return ((function(arg1, arg2, arg3, arg4, ...args) { return f(arg1, arg2, arg3, arg4, args); }));
}

function make5(f) {
  return ((function(arg1, arg2, arg3, arg4, arg5, ...args) { return f(arg1, arg2, arg3, arg4, arg5, args); }));
}

function make6(f) {
  return ((function(arg1, arg2, arg3, arg4, arg5, arg6, ...args) { return f(arg1, arg2, arg3, arg4, arg5, arg6, args); }));
}

function make7(f) {
  return ((function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, ...args) { return f(arg1, arg2, arg3, arg4, arg5, arg6, arg7, args); }));
}

function makeN(f, n) {
  return ((function(...args) { return f(args.slice(0, n), args.slice(n)); }));
}

function apply0$1(f0, variadic) {
  return (f0(...variadic));
}

function apply1$1(f1, arg1, variadic) {
  return (f1(arg1, ...variadic));
}

function applyN$1(fn, args, variadic) {
  return (fn(...args, ...variadic));
}

var Variadic = {
  make0: make0,
  make1: make1,
  make2: make2,
  make3: make3,
  make4: make4,
  make5: make5,
  make6: make6,
  make7: make7,
  makeN: makeN,
  apply0: apply0$1,
  apply1: apply1$1,
  applyN: applyN$1
};

function apply0$2(f0, variadic) {
  return (new f0(...variadic));
}

function apply1$2(f1, arg1, variadic) {
  return (new f1(arg1, ...variadic));
}

function applyN$2(fn, args, variadic) {
  return (new fn(...args, ...variadic));
}

var NewableVariadic = {
  apply0: apply0$2,
  apply1: apply1$2,
  applyN: applyN$2
};

var Partial = {};

var Required = {};

var Readonly = {};

var Pick = {};

var Record = {};

var Exclude = {};

var Extract = {};

var Omit = {};

var NonNullable = {};

var Parameters = {};

var ConstructorParameters = {};

var ReturnType = {};

var InstanceType = {};

var ThisParameterType = {};

var OmitThisParameter = {};

var ThisType = {};

var Uppercase = {};

var Lowercase = {};

var Capitalize = {};

var Uncapitalize = {};

function box(it, tag) {
  return ({ [tag]: it[tag], _0: it });
}

function unbox(it) {
  return (it._0);
}

var Variant = {
  box: box,
  unbox: unbox
};

var Experimental = {
  Variant: Variant
};

export {
  Never ,
  Any ,
  Unknown ,
  Union ,
  Intersection ,
  Primitive ,
  Newable ,
  Variadic ,
  NewableVariadic ,
  Partial ,
  Required ,
  Readonly ,
  Pick ,
  Record ,
  Exclude ,
  Extract ,
  Omit ,
  NonNullable ,
  Parameters ,
  ConstructorParameters ,
  ReturnType ,
  InstanceType ,
  ThisParameterType ,
  OmitThisParameter ,
  ThisType ,
  Uppercase ,
  Lowercase ,
  Capitalize ,
  Uncapitalize ,
  Experimental ,
}
/* No side effect */
